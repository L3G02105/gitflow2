name: Auto Versioning & Telegram Notify

on:
  pull_request:
    types: [closed]

permissions:
  contents: write

jobs:
  version_and_changelog:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
       contents: write
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      base_branch: ${{ steps.vars.outputs.base_branch }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Read variables
        id: vars
        run: |
          echo "base_branch=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
          echo "head_branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT

      - name: Read current version
        id: current
        run: |
          if [ ! -f VERSION ]; then echo "0.0.0" > VERSION; fi
          echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump
        env:
          BASE: ${{ github.event.pull_request.base.ref }}
          HEAD: ${{ github.event.pull_request.head.ref }}
          CURRENT_VERSION: ${{ steps.current.outputs.version }}
        run: |
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          if [ "$BASE" = "develop" ] && [[ "$HEAD" == feature/* ]]; then
            ((minor++)); patch=0
          elif [ "$BASE" = "main" ] && [[ "$HEAD" == hotfix/* ]]; then
            ((patch++))
          elif [ "$BASE" = "main" ] && [ "$HEAD" = "develop" ]; then
            ((major++)); minor=0; patch=0
          fi
          NEW_VERSION="${major}.${minor}.${patch}"
          echo "$NEW_VERSION" > VERSION
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update changelog
        run: |
          DATE=$(date +'%Y-%m-%d')
          PR_TITLE="${{ github.event.pull_request.title }}"
          AUTHOR="${{ github.event.pull_request.user.login }}"
          echo "## v${{ steps.bump.outputs.new_version }} - ${DATE}" >> CHANGELOG.md
          echo "- ${PR_TITLE} (@${AUTHOR})" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

      - name: Commit & Push
        run: |
          git add VERSION CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }}"
          git push origin ${{ github.event.pull_request.base.ref }}
          git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release ${{ steps.bump.outputs.new_version }}"
          git push origin "v${{ steps.bump.outputs.new_version }}"

  notify:
    name: Notify Telegram
    runs-on: ubuntu-latest
    needs: version_and_changelog
    steps:
      - name: Send Telegram message
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          VERSION: ${{ needs.version_and_changelog.outputs.new_version }}
          BASE: ${{ needs.version_and_changelog.outputs.base_branch }}
          REPO: ${{ github.repository }}
        run: |
          MESSAGE="ðŸš€ *New Release:* v${VERSION}\nðŸ“¦ Repo: ${REPO}\nðŸŒ¿ Branch: ${BASE}\nâœ… Auto-versioning successful!"
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -d chat_id=${TELEGRAM_CHAT_ID} \
              -d parse_mode="Markdown" \
              -d text="$MESSAGE"
